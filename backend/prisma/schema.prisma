generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  password       String
  role           UserRole
  isApproved     Boolean  @default(false)
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  courses      Course[]      @relation("InstructorCourses")
  enrollments  Enrollment[]
  quizAttempts QuizAttempt[]
  progress     Progress[]
  certificates Certificate[]
  payments     Payment[]

  PasswordReset PasswordReset[]
}

model PasswordReset {
  token     String   @id
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  expiresAt DateTime
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  level       String
  category    String
  duration    Int // duration in minutes
  isPremium   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  instructor   User   @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId String

  modules     Module[]
  enrollments Enrollment[]
  quizzes     Quiz[]
  payments    Payment[]

  Certificate Certificate[]
}

model Module {
  id       String @id @default(cuid())
  title    String
  order    Int
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  contents Content[]

  Progress Progress[]
}

model Content {
  id       String @id @default(cuid())
  type     String // e.g., VIDEO, PDF, LINK
  url      String
  title    String
  module   Module @relation(fields: [moduleId], references: [id])
  moduleId String
}

model Enrollment {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   String
  enrolledAt DateTime @default(now())
}

model Quiz {
  id        String     @id @default(cuid())
  title     String
  course    Course     @relation(fields: [courseId], references: [id])
  courseId  String
  questions Question[]

  QuizAttempt QuizAttempt[]
}

model Question {
  id      String   @id @default(cuid())
  text    String
  type    String // MCQ, TRUE_FALSE, SHORT
  quiz    Quiz     @relation(fields: [quizId], references: [id])
  quizId  String
  options Option[] // Only for MCQs
  correct String // Store correct answer (simple string or json)
}

model Option {
  id         String   @id @default(cuid())
  text       String
  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model QuizAttempt {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  quizId      String
  score       Float
  attemptDate DateTime @default(now())
}

model Progress {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  module      Module    @relation(fields: [moduleId], references: [id])
  moduleId    String
  completed   Boolean   @default(false)
  completedAt DateTime?
}

model Certificate {
  id             String   @id @default(cuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  course         Course   @relation(fields: [courseId], references: [id])
  courseId       String
  issuedAt       DateTime @default(now())
  certificateUrl String
}

model Payment {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  amount    Float
  status    String // pending, completed, failed
  provider  String // Stripe, PayPal
  createdAt DateTime @default(now())
}
