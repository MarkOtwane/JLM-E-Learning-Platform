# JLM E-Learning REST Client Test Suite
# Run with REST Client extension in VS Code

# Environment variables - replace with actual values after running the requests
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWNwdHpzbXAwMDAxOGE4YjRxbzBudWN0Iiwicm9sZSI6IlNUVURFTlQiLCJpYXQiOjE3NTE3MTM3MTYsImV4cCI6MTc1MjMxODUxNn0.pJbIXGfFmYN2LV2cAOoOFcjtklD5WpVS1t8h-TnGpoM
@instructor_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWNwdTg3bWQwMDAwOGFpZ3ozdnAzNDZoIiwicm9sZSI6IklOU1RSVUNUT1IiLCJpYXQiOjE3NTE3MTIzNzUsImV4cCI6MTc1MjMxNzE3NX0.RT-9n63dONaU0senDTYuI7-IvCjMP8x5j4FCAwvI_2k
@admin_token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWNwdTg3bWQwMDAwOGFpZ3ozdnAzNDZoIiwicm9sZSI6IkFETUlOIiwiaWF0IjoxNzUxNzA5NTU3LCJleHAiOjE3NTIzMTQzNTd9.0000000000000000000000000000000000000000

# IDs from our testing session
@courseId = cmcq4bo3r00018ab2rngjtbv7
@premiumCourseId = cmcq51or700018aquggf2mc15
@moduleId = cmcq4bufc00038ab2rib3i24w
@contentId = cmcq4egug00058ab28lh94p4t
@quizId = cmcq4gbo400018ac03ptb6y7v
@question1Id = cmcq4gbo400028ac0yaofobzq
@question2Id = cmcq4gbo400038ac07f1ttscr
@studentId = cmcptzsmp00018a8b4qo0nuct
@instructorId = cmcpu87md00008aigz3vp346h
@certificateId = cmcq4wkxk00018agm7hufseft

### üîê AUTH - Register Student
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "name": "Jane Doe",
  "email": "otwanemark003@gmail.com",
  "password": "password123",
  "role": "STUDENT"
}

### üîê AUTH - Login Student
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "otwanemark003@gmail.com",
  "password": "newpassword123"
}

### üßë‚Äçüè´ AUTH - Register Instructor
POST http://localhost:3000/api/auth/register
Content-Type: application/json

{
  "name": "Mark Teacher",
  "email": "mark@teach.com",
  "password": "teachpass",
  "role": "INSTRUCTOR"
}

### üîë AUTH - Login as Instructor
POST http://localhost:3000/api/auth/login
Content-Type: application/json

{
  "email": "mark@teach.com",
  "password": "teachpass"
}

### üîê AUTH - Forgot Password (Public)
POST http://localhost:3000/api/auth/forgot-password
Content-Type: application/json

{
  "email": "otwanemark003@gmail.com"
}

### üîê AUTH - Reset Password
POST http://localhost:3000/api/auth/reset-password
Content-Type: application/json

{
  "token": "your_reset_token_here",
  "newPassword": "newpassword123"
}

### üë§ USERS - Get My Profile
GET http://localhost:3000/api/users/me
Authorization: Bearer {{token}}

### üë§ USERS - Update Profile
PATCH http://localhost:3000/api/users/me
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Jane Smith Doe"
}

### üîë USERS - Update Password
PATCH http://localhost:3000/api/users/password
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "currentPassword": "password123",
  "newPassword": "newpassword123"
}

### üìö COURSES - Create Course (Instructor)
POST http://localhost:3000/api/courses
Authorization: Bearer {{instructor_token}}
Content-Type: application/json

{
  "title": "Intro to Node.js",
  "description": "Learn Node fundamentals",
  "level": "Beginner",
  "category": "Programming",
  "duration": 120,
  "isPremium": false
}

### üìö COURSES - Create Premium Course (Instructor)
POST http://localhost:3000/api/courses
Authorization: Bearer {{instructor_token}}
Content-Type: application/json

{
  "title": "Advanced Node.js",
  "description": "Advanced Node.js concepts",
  "level": "Advanced",
  "category": "Programming",
  "duration": 180,
  "isPremium": true
}

### üìö COURSES - List Courses
GET http://localhost:3000/api/courses
Authorization: Bearer {{token}}

### üìö COURSES - Get Course by ID
GET http://localhost:3000/api/courses/{{courseId}}
Authorization: Bearer {{token}}

### üß© MODULES - Create Module (inside Course)
POST http://localhost:3000/api/courses/{{courseId}}/modules
Authorization: Bearer {{instructor_token}}
Content-Type: application/json

{
  "title": "Setup & Environment"
}

### üéûÔ∏è CONTENT - Upload Video Content
POST http://localhost:3000/api/content/upload
Authorization: Bearer {{instructor_token}}
Content-Type: application/json

{
  "title": "Installing Node.js",
  "type": "VIDEO",
  "moduleId": "{{moduleId}}",
  "url": "https://video.example.com/node-setup"
}

### üë®‚Äçüéì STUDENTS - Enroll in Course
POST http://localhost:3000/api/students/enroll
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "courseId": "{{courseId}}"
}

### üìä PROGRESS - Mark Content as Completed
POST http://localhost:3000/api/progress/mark
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "contentId": "{{contentId}}"
}

### üìä PROGRESS - Get Completed Content
GET http://localhost:3000/api/progress/completed
Authorization: Bearer {{token}}

### üìä PROGRESS - Get Module Progress Status
GET http://localhost:3000/api/progress/status/{{moduleId}}
Authorization: Bearer {{token}}

### üß† QUIZZES - Create Quiz
POST http://localhost:3000/api/quizzes
Authorization: Bearer {{instructor_token}}
Content-Type: application/json

{
  "moduleId": "{{moduleId}}",
  "questions": [
    {
      "question": "What is Node.js?",
      "options": ["A JavaScript runtime", "A database", "A web browser", "An operating system"],
      "correctAnswer": "A JavaScript runtime"
    },
    {
      "question": "Which command installs Node.js packages?",
      "options": ["npm install", "node install", "js install", "package install"],
      "correctAnswer": "npm install"
    }
  ]
}

### üß† QUIZZES - Get Quiz by Module
GET http://localhost:3000/api/quizzes/module/{{moduleId}}
Authorization: Bearer {{token}}

### ‚úÖ QUIZ ATTEMPT - Submit Quiz
POST http://localhost:3000/api/quizzes/submit
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "quizId": "{{quizId}}",
  "answers": [
    {
      "questionId": "{{question1Id}}",
      "selectedAnswer": "A JavaScript runtime"
    },
    {
      "questionId": "{{question2Id}}",
      "selectedAnswer": "npm install"
    }
  ]
}

### üéì CERTIFICATES - Download Certificate
POST http://localhost:3000/api/certificates/download
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "courseId": "{{courseId}}"
}

### üéì CERTIFICATES - Get My Certificates
GET http://localhost:3000/api/certificates
Authorization: Bearer {{token}}

### üí≥ PAYMENTS - Initiate Stripe Payment
POST http://localhost:3000/api/payments/initiate
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "courseId": "{{premiumCourseId}}",
  "provider": "STRIPE",
  "phoneOrEmail": "otwanemark003@gmail.com"
}

### üí≥ PAYMENTS - Verify Payment
POST http://localhost:3000/api/payments/verify
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "paymentId": "your_payment_id_here",
  "provider": "STRIPE"
}

### üìä INSTRUCTORS - Analytics Dashboard
GET http://localhost:3000/api/instructors/dashboard
Authorization: Bearer {{instructor_token}}

### üì¢ NOTIFICATIONS - Send Welcome Email (Admin Only)
POST http://localhost:3000/api/notifications/send
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "event": "SIGNUP",
  "recipient": "otwanemark003@gmail.com",
  "payload": {
    "name": "Jane Doe"
  }
}

### üì¢ NOTIFICATIONS - Send Quiz Result (Admin Only)
POST http://localhost:3000/api/notifications/send
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "event": "QUIZ_GRADED",
  "recipient": "otwanemark003@gmail.com",
  "payload": {
    "name": "Jane Doe",
    "courseTitle": "Intro to Node.js",
    "score": 100,
    "totalQuestions": 2
  }
}

### üì¢ NOTIFICATIONS - Send Certificate Issued (Admin Only)
POST http://localhost:3000/api/notifications/send
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "event": "CERTIFICATE_ISSUED",
  "recipient": "otwanemark003@gmail.com",
  "payload": {
    "name": "Jane Doe",
    "courseTitle": "Intro to Node.js",
    "certificateUrl": "https://certs.example.com/jane-node"
  }
}

### üõ°Ô∏è ADMIN - Update User Role
POST http://localhost:3000/api/admin/users/update-role
Authorization: Bearer {{admin_token}}
Content-Type: application/json

{
  "userId": "{{instructorId}}",
  "role": "ADMIN"
}

### üõ°Ô∏è ADMIN - Filter Users
GET http://localhost:3000/api/admin/users?role=STUDENT&keyword=Jane
Authorization: Bearer {{admin_token}}

### üõ°Ô∏è ADMIN - Get Platform Statistics
GET http://localhost:3000/api/admin/statistics
Authorization: Bearer {{admin_token}}

# ========================================
# TESTING FLOW SUMMARY
# ========================================
# 
# 1. AUTHENTICATION ‚úÖ
#    - Register student/instructor ‚úÖ
#    - Login with JWT tokens ‚úÖ
#    - Password update ‚úÖ
#    - Forgot password (fixed) ‚úÖ
#
# 2. COURSE MANAGEMENT ‚úÖ
#    - Create courses (free & premium) ‚úÖ
#    - Create modules ‚úÖ
#    - Upload content ‚úÖ
#    - List courses ‚úÖ
#
# 3. STUDENT EXPERIENCE ‚úÖ
#    - Enroll in courses ‚úÖ
#    - Track progress ‚úÖ
#    - Take quizzes ‚úÖ
#    - Download certificates ‚úÖ
#
# 4. ANALYTICS ‚úÖ
#    - Instructor dashboard ‚úÖ
#
# 5. PAYMENT SYSTEM ‚ö†Ô∏è
#    - Stripe integration (needs API keys) ‚ö†Ô∏è
#
# 6. NOTIFICATIONS ‚ö†Ô∏è
#    - Email system (needs admin role) ‚ö†Ô∏è
#
# 7. USER MANAGEMENT ‚úÖ
#    - Profile updates ‚úÖ
#    - Password changes ‚úÖ
#
# ========================================
# USEFUL IDs FOR TESTING
# ========================================
# Course IDs:
# - Free course: cmcq4bo3r00018ab2rngjtbv7
# - Premium course: cmcq51or700018aquggf2mc15
#
# Module ID: cmcq4bufc00038ab2rib3i24w
# Content ID: cmcq4egug00058ab28lh94p4t
# Quiz ID: cmcq4gbo400018ac03ptb6y7v
# Question IDs: cmcq4gbo400028ac0yaofobzq, cmcq4gbo400038ac07f1ttscr
# Student ID: cmcptzsmp00018a8b4qo0nuct
# Instructor ID: cmcpu87md00008aigz3vp346h
# Certificate ID: cmcq4wkxk00018agm7hufseft
